a hash is stored as
unsigned char txid[] = {0xAA, ....., 0xEE} // in little endien style which means that AA is the LSB and EE is the MSB

Fixed data hash

char message[]= "hello world";
uint16_t prefix= 0x...;
uint8_t suffix = 0x..;
uint8_t digest[32];

bbp_sha256(digest, (uint8_t *)message, strlen(message));

bbp_sha256(digest, digest, 32); // alternatively i can write SHA256_DIGEST_LENGTH instead of 32

these two statements gives us the hash256 output of message;

in final packing, we will append the prefix and suffix to digest
uint8_t ser[35];
*(uint16_t *)(ser) = bbp_eint16(BBP_LITTLE, prefix);
memcpy(ser+2, digest, 32);
*(ser+2+32) = suffix ;

uint8_t n8 = 0x73;
uint16_t n16= 0x...;
uint32_t = ...;
uint64_t = ....;

uint8_t ser[15];
*ser = n8;
*(uint16_t *)(ser+1) = bbp_eint16(BBP_LITTLE, n16); // bbp_eint16 function here enters data into ser in little endian fashion which is denoted by BBP_LITTLE
*(uint32_t *)(ser+3 )= bbp_eint32(BBP_LITTLE, n32);
*(uint64_t *)(ser+7) = bbp_eint64(BBP_LITTLE, n64);

hence we have created a serial binary data of 15 bytes in ser (1+2+4+8)

uint32_t n32 = 0x12345678;
char str[] = "foobar";
size_t str_len = 10;
uint16_t n16 = 0x1234;

size_t str_real_len = strlen(str);
size_t str_pad_len = str_len - str_real_len;

char ser[16];
*(uint32_t *)(ser) = bbp_eint32(BBP_LITTLE, n32);
memcpy(ser+4, str, str_real_len);
if (str_pad_len>0) {
memset(ser+4+str_real_len, '\0', str_pad_len); //'\0' is equivalent to the byte 0x00
}
*(uint16_t *)(ser+4+str_len) = bbp_eint16(BBP_LITTLE, n16);

above code creates a fixed length string data of 16 bytes (4 +10+2)

typedef enum{
BBP_VARINT16 = 0xfd; //precedes data of 16 bits
BBP_VARINT32 = 0xfe; //precedes data of 32 bits
BBP_VARINT64 = 0xff; //precedes data of 64 bits
} bbp_varint_t;

This is for variable input or variable data length serialization. To represent 0xfd 0xfe 0xff as data themselves we use 16 bit format like 0xfd 0x00 0xfe where the first byte indicated length of data ahead

typedef struct{
uint16_t fixed1;
uint64_t var2;
uint32_t fixed3;
uint8_t fixed4;
} foo_t;

foo_t decoded; size_t varlen;
decoded.fixed1 = bbp_eint16(BBP_LITTLE, *(uint16_t *)bytes);
decoded.var2 = bbp_varint_get(bytes+2, &varlen); //bbp_varint_get takes variable length data from bytes+2 and puts it in var2 and puts the size of data extracted in varlen
decoded.fixed3 = bbp_eint32(BBP_LITTLE, *(uint32_t *)(bytes+2+varlen));
decoded.fixed4 = *(bytes+2+varlen+4);

the above code serializes variable data

size_t len;
size_t varlen;
uint8_t data[100]= {0};
len = bbp_varint_get(bytes, &varlen);
memcpy(data, bytes+varlen, len);

this deserializes serial variable data into data[100]

keys as properties

bitcoin uses PKC that is public key cryptography
public key for receiving and representing
private key for verification and paying

elliptic curves are : connected non singular projectile curves with genus 1. genus one roughly means 'one hole in the graph'.
y-squared = x-cubed + bx + a

bitcoin uses PKC based on elliptic curves for
key generation
signing
sign verification

Signatures are used for verification of a transaction by a third party (miners).
A certain elliptic curve C is agreed upon beforehand
signing:
digest = H(message); //hash function
signature = ec_sign(C, digest, private key);

verifying:
digest = H(message);
is_auth = ec_verify(C, digest, signature, public key);

ec_* functions involved elliptic curve mathematics/algorithms.

private keys are 32 bytes long
public keys are 64 bytes long in uncompressed form and 32 long in compressed form. Both forms include an additional byte as a prefix
the elliptic curve used is secp256k1 curve
ec crypto is based on modular arithmetic

openssl commandline for generating private key
$openssl ecparam -name secp256k1 -genkey -out ec-priv.pem
// ec-priv.pem is the name of the outfile containing randomly generated private key

openssl commandline for decoding private key file to raw hexes text
$openssl ec -in ec-priv.pem -text -noout

Public keys are two 32-byte numbers which represent the (x,y) coordinate on the elliptic curve. The uncompressed form also includes a single byte prefix making a total of 65 bytes.
The (x,y) can be pointed to using the private key but not vice versa.
The compressed form simply omits the y coordinate of the public key and is hence 32 bytes plus one for prefix.

openssl commandline for obtaining public key file from private key file
$openssl ec -in ec-priv.pem -pubout -out ec-pub.pem
//Here ec-priv.pem is the private key and ec-pub.pem is the output public key


openssl commandline for decoding public key from .pem file to uncompressed form
$openssl ec -in ec-pub.pem -pubin -text -out ec-pub.pem_in_raw_hexes
//Prefix is 04 in uncompressed form. The raw hexes of the pubkey starts with the prefix, followed by x of 32 bytes and then y of 32 bytes.

To manually convert 65 byte uncompressed pub key to compressed form - omit y coordinate's 32 bytes and change the prefix 04 to 02 if y coordinate ends in even number or 03 if y coordinate ends in odd number.

openssl commandline for decoding public key from file to compressed form
$openssl ec -in ec-pub.pem -pubin -text -out ec-pub.pem_in_raw_hexes_uncompressed -conv_form compressed

Generating a key from code

function in ec.h
EC_KEY *bbp_ec_new_keypair(const uint8_t *priv_bytes);

Openssl data structures :
BN_CTX BIGNUM help with precision arithmetics involving very large numbers
EC_KEY is a key pair or just a public key
EC_GROUP EC_POINT help get public key from private

key = EC_KEY_new_by_curve_name(NID_secp256k1); //creating an empty key


BN_init(&priv); //creating a BIGNUM priv
BN_bin2bn(priv_bytes, 32, &priv); //converting priv_bytes to BIGNUM form in priv
EC_KEY_set_private_key(key, &priv); //entering priv into key

ECDSA Elliptic Curve Digital Signature Algorithm
private key + message/data = signature
signature + hashfunction + public key = verified!

openssl commandline for signing the sha256 digest of a message/data/file with the private key.
$openssl dgst -sha256 -sign ec-priv.pem ex-messages.txt >ex-signature.der

Format of signature is not deterministic. The same signature does not output everytime the above commandline is run.
This leads to transaction  malleability : which means a single valid transaction has multiple different tx id related to each different signature.

To display hex-coded signature :
$openssl dgst -sha256 -hex -sign ec-priv.pem ex-messages.txt

To verify signature using public key and message :
$openssl dgst -sha256 -verify ec-pub.pem -signature ec-signature.der ex-messages.txt
//Output : Verified OK

Verifying code translation

uint8_t priv_bytes[32]={...}
const char message[] = "This is a confidential message\n";

EC_KEY *key;
uint8_t digest[32];
ECDSA_SIG *signature;
uint8_t *der, *der_copy;
size_t der_len;
key = bbp_ec_new_keypair(priv_bytes);
bbp_sha256(digest, (uint8_t *)message, strlen(message));
signature = ECDSA_do_sign(digest, sizeof(digest), key);

struct {
BIGNUM *r;
BIGNUM *s;
} ECDSA_SIG;

der_len = ECDSA_size(size);
der= calloc(der_len, sizeof(uint8_t));
der_copy=der;
i2d_ECDSA_SIG(signature, &der_copy);

uint8_t pub_bytes[32] ={...};
uint8_t der_bytes[]={...};
const char message[] = "this is a very confidential message\n";

EC_KEY *key;
const uint8_t *der_bytes_copy;
ECDSA_SIG *signature;
uint8_t digest[32];
int verified;
...
key=bbp_ec_new_pubkey(pub_bytes);
der_bytes_copy = der_bytes;
signature = d2i_ECDSA_SIG(NULL, &der_bytes_copy, sizeof(der_len));

helper function to get compressed form of public key
EC_KEY *bbp_ec_new_pubkey(const uint8_t* pub_bytes, size_t pub_len);

bbp_sha256(digest, (uint8_t *)message, strlen(message));
verified = ECDSA_do_verify(digest, sizeof(digest), signature, key);

ECDSA_do_verify returns 1 if valid, 0 if invalid, -1 if unexpected error occured.

Network Interoperability
Mainnet is where all the real bitcoins are
Testnet3 is a testing p2p network Testnet3 coins are worthless
Regression Test or Regtest network is a local mining mode where private, customized bitcoin-style blockchains are operated with negligible processing power.

Mainnet TCP port: 8333 prefix : f9 be b4 d9
Testnet3 TCP port: 18333 prefix : 0b 11 09 07

Transactions and blockchain bare no information about the network they belong to.
User keys and addresses bare a magic prefix that indicates which network they are communicating in.
A transaction can be published to both Mainnet and Testnet3

Base58 is a stripped down version of Base64 which is widely used scheme for displaying ASCII.
Base58 has only alphanumeric characters.
Base58 excludes 0OIl
They are fully selectable with a double click

Base58 alphabet
value character
0 1
... 0 excluded
8 9
9 A
... I and O excluded
32 Z
33 a
... l excluded
57 z

Base58check
Base58 are long and unfriendly strings. A checksum suffix is appended to avoid typos.
The checksum is the first four bytes of hash256(Base58-payload)
Base58check is payload+checksum
Base58 is serialized big endian

Wallet Import Format WIF
Prepend 80 for Mainnet and ef for Testnet3
Append 01 if key corresponds to compressed public key
Encode to Base58check

1. Prepend ef
ef
16 26 07 83 e4 0b 16 73
16 73 62 2a c8 a5 b0 45
fc 3e a4 af 70 f7 27 f3
f9 e9 2b dd 3a 1d dc 42
2. Append 01
ef
16 26 07 83 e4 0b 16 73
16 73 62 2a c8 a5 b0 45
fc 3e a4 af 70 f7 27 f3
f9 e9 2b dd 3a 1d dc 42
01
3. Generate hash256
35 06 7f 25 1e 07 d0 2b
59 ca f4 cc 77 36 20 7d
73 0d 21 88 f9 62 8f 47
a9 2a 1a 92 7d 33 7b 2a
4. First four bytes
35 06 7f 25
4. Append first four bytes of 3. to 2.
ef
16 26 07 83 e4 0b 16 73
16 73 62 2a c8 a5 b0 45
fc 3e a4 af 70 f7 27 f3
f9 e9 2b dd 3a 1d dc 42
01
35 06 7f 25
5. Encode to Base58
cNKkmrwHuShs2mvkVEKfXULxXhxRo3yy1cK6sq62uBp2Pc8Lsa76
